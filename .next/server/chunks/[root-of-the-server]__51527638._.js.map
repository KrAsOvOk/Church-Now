{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/Church/Church%20Now/src/lib/mongodb.ts"],"sourcesContent":["// filepath: src/lib/mongodb.ts\r\nimport { MongoClient } from \"mongodb\";\r\n\r\nconst uri = process.env.MONGODB_URI as string;\r\nconst options = {};\r\n\r\nlet client;\r\nlet clientPromise: Promise<MongoClient>;\r\n\r\nif (!process.env.MONGODB_URI) {\r\n  throw new Error(\"Please add your MongoDB URI to .env.local\");\r\n}\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  // In development mode, use a global variable so the value\r\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\r\n  if (!(global as any)._mongoClientPromise) {\r\n    client = new MongoClient(uri, options);\r\n    (global as any)._mongoClientPromise = client.connect();\r\n  }\r\n  clientPromise = (global as any)._mongoClientPromise;\r\n} else {\r\n  // In production mode, it's best to not use a global variable.\r\n  client = new MongoClient(uri, options);\r\n  clientPromise = client.connect();\r\n}\r\n\r\nexport default clientPromise;"],"names":[],"mappings":"AAAA,+BAA+B;;;;AAC/B;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAAU,CAAC;AAEjB,IAAI;AACJ,IAAI;AAEJ,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,MAAM,IAAI,MAAM;AAClB;AAEA,wCAA4C;IAC1C,0DAA0D;IAC1D,6EAA6E;IAC7E,IAAI,CAAC,AAAC,OAAe,mBAAmB,EAAE;QACxC,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC7B,OAAe,mBAAmB,GAAG,OAAO,OAAO;IACtD;IACA,gBAAgB,AAAC,OAAe,mBAAmB;AACrD,OAAO;;AAIP;uCAEe","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/Church/Church%20Now/src/app/api/udalosti/route.tsx"],"sourcesContent":["import clientPromise from \"@/lib/mongodb\";\r\nimport { ObjectId } from \"mongodb\";\r\n\r\nexport async function GET() {\r\n  const client = await clientPromise;\r\n  const db = client.db(\"AllData\");\r\n  const udalosti = await db.collection(\"udalosti\").find({}).toArray();\r\n  return new Response(JSON.stringify(udalosti), { status: 200 });\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n  const client = await clientPromise;\r\n  const db = client.db(\"AllData\");\r\n  const data = await request.json();\r\n  const result = await db.collection(\"udalosti\").insertOne(data);\r\n  return new Response(JSON.stringify(result), { status: 201 });\r\n}\r\n\r\nexport async function DELETE(request: Request) {\r\n  const client = await clientPromise;\r\n  const db = client.db(\"AllData\");\r\n  const { _id } = await request.json();\r\n  //const { ObjectId } = require(\"mongodb\");\r\n  \r\n  const result = await db.collection(\"udalosti\").deleteOne({ _id: new ObjectId(_id) });\r\n  return new Response(JSON.stringify(result), { status: 200 });\r\n}\r\n\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEO,eAAe;IACpB,MAAM,SAAS,MAAM,uHAAA,CAAA,UAAa;IAClC,MAAM,KAAK,OAAO,EAAE,CAAC;IACrB,MAAM,WAAW,MAAM,GAAG,UAAU,CAAC,YAAY,IAAI,CAAC,CAAC,GAAG,OAAO;IACjE,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,WAAW;QAAE,QAAQ;IAAI;AAC9D;AAEO,eAAe,KAAK,OAAgB;IACzC,MAAM,SAAS,MAAM,uHAAA,CAAA,UAAa;IAClC,MAAM,KAAK,OAAO,EAAE,CAAC;IACrB,MAAM,OAAO,MAAM,QAAQ,IAAI;IAC/B,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,YAAY,SAAS,CAAC;IACzD,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,SAAS;QAAE,QAAQ;IAAI;AAC5D;AAEO,eAAe,OAAO,OAAgB;IAC3C,MAAM,SAAS,MAAM,uHAAA,CAAA,UAAa;IAClC,MAAM,KAAK,OAAO,EAAE,CAAC;IACrB,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,QAAQ,IAAI;IAClC,0CAA0C;IAE1C,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,YAAY,SAAS,CAAC;QAAE,KAAK,IAAI,uGAAA,CAAA,WAAQ,CAAC;IAAK;IAClF,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,SAAS;QAAE,QAAQ;IAAI;AAC5D","debugId":null}}]
}