{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/Church/Church%20Now/src/lib/mongodb.ts"],"sourcesContent":["// filepath: src/lib/mongodb.ts\r\nimport { MongoClient } from \"mongodb\";\r\n\r\nconst uri = process.env.MONGODB_URI as string;\r\nconst options = {};\r\n\r\nlet client;\r\nlet clientPromise: Promise<MongoClient>;\r\n\r\nif (!process.env.MONGODB_URI) {\r\n  throw new Error(\"Please add your MongoDB URI to .env.local\");\r\n}\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  // In development mode, use a global variable so the value\r\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\r\n  if (!(global as any)._mongoClientPromise) {\r\n    client = new MongoClient(uri, options);\r\n    (global as any)._mongoClientPromise = client.connect();\r\n  }\r\n  clientPromise = (global as any)._mongoClientPromise;\r\n} else {\r\n  // In production mode, it's best to not use a global variable.\r\n  client = new MongoClient(uri, options);\r\n  clientPromise = client.connect();\r\n}\r\n\r\nexport default clientPromise;"],"names":[],"mappings":"AAAA,+BAA+B;;;;AAC/B;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAAU,CAAC;AAEjB,IAAI;AACJ,IAAI;AAEJ,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,MAAM,IAAI,MAAM;AAClB;AAEA,wCAA4C;IAC1C,0DAA0D;IAC1D,6EAA6E;IAC7E,IAAI,CAAC,AAAC,OAAe,mBAAmB,EAAE;QACxC,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC7B,OAAe,mBAAmB,GAAG,OAAO,OAAO;IACtD;IACA,gBAAgB,AAAC,OAAe,mBAAmB;AACrD,OAAO;;AAIP;uCAEe","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/Church/Church%20Now/src/app/api/test-mongo/route.ts"],"sourcesContent":["// filepath: src/app/api/test-mongo/route.ts\r\nimport clientPromise from \"@/lib/mongodb\";\r\n\r\nexport async function GET() {\r\n  try {\r\n    const client = await clientPromise;\r\n    const db = client.db(); // Uses the default DB from your URI\r\n    // List collections as a simple test\r\n    const collections = await db.listCollections().toArray();\r\n    return new Response(JSON.stringify({ success: true, collections }), { status: 200 });\r\n  } catch (error) {\r\n    const errorMessage = error instanceof Error ? error.message : String(error);\r\n    return new Response(JSON.stringify({ success: false, error: errorMessage }), { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":"AAAA,4CAA4C;;;;AAC5C;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,uHAAA,CAAA,UAAa;QAClC,MAAM,KAAK,OAAO,EAAE,IAAI,oCAAoC;QAC5D,oCAAoC;QACpC,MAAM,cAAc,MAAM,GAAG,eAAe,GAAG,OAAO;QACtD,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;YAAM;QAAY,IAAI;YAAE,QAAQ;QAAI;IACpF,EAAE,OAAO,OAAO;QACd,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO;QACrE,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;YAAO,OAAO;QAAa,IAAI;YAAE,QAAQ;QAAI;IAC7F;AACF","debugId":null}}]
}